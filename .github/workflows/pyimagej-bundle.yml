name: pyimagej-bundle

on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_build:
        description: 'Force build new bundle even if Fiji is up-to-date'
        required: false
        default: false
        type: boolean

jobs:
  build-pyimagej-bundle:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if Fiji needs updating
        id: check_fiji
        run: |
          if [ "${{ inputs.force_build }}" = "true" ]; then
            echo "fiji_changed=true" >> $GITHUB_OUTPUT
            echo "Force build requested. Will build new PyImageJ bundle."
          else
            # Check if latest Fiji bundle is newer than our latest PyImageJ bundle

            # Get latest Fiji bundle modification time
            fiji_time=$(curl -Ifs "https://downloads.imagej.net/fiji/latest/fiji-latest-portable-nojava.zip" | grep '^Last-Modified:' | sed 's/Last-Modified: //')
            fiji_timestamp=$(date --date="$fiji_time" '+%s')
            echo "Latest Fiji bundle: $fiji_time ($fiji_timestamp)"

            # Get our latest PyImageJ bundle release time (if any exists)
            latest_release=$(gh release list --limit 1 --json tagName,createdAt | jq -r '.[] | select(.tagName | startswith("pyimagej-")) | .createdAt' || echo "")

            if [ -z "$latest_release" ]; then
              echo "No existing PyImageJ bundle found. Will build new bundle."
              echo "fiji_changed=true" >> $GITHUB_OUTPUT
            else
              pyimagej_timestamp=$(date --date="$latest_release" '+%s')
              echo "Latest PyImageJ bundle: $latest_release ($pyimagej_timestamp)"

              if [ "$fiji_timestamp" -gt "$pyimagej_timestamp" ]; then
                echo "Fiji bundle is newer than PyImageJ bundle. Will build new bundle."
                echo "fiji_changed=true" >> $GITHUB_OUTPUT
              else
                echo "PyImageJ bundle is up-to-date. No new bundle needed."
                echo "fiji_changed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Build Fiji installation
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        run: |
          ./bootstrap-fiji.sh latest
          ./download-javas.sh latest
          ./update-fiji.sh latest
          
      - name: Install PyImageJ and populate caches
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        run: |
          pip install pyimagej
          # Use the downloaded Java 21 from download-javas.sh
          JAVA_HOME=$(find $(pwd)/jdk-latest/linux64 -name "*jdk*" -type d | head -1)
          export JAVA_HOME
          echo "Using JAVA_HOME: $JAVA_HOME"
          python -c "
          import imagej
          ij = imagej.init('./Fiji')
          print(f'Initialized ImageJ version: {ij.getVersion()}')
          "
          
      - name: Create bundle
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        run: |
          DATE=$(date +%Y%m%d)
          # Copy caches to current directory for bundling
          cp -r ~/.jgo .jgo
          cp -r ~/.m2 .m2
          tar -czf pyimagej-${DATE}.tar.gz \
            Fiji/ \
            jdk-latest/ \
            .jgo/ \
            .m2/
          echo "BUNDLE_NAME=pyimagej-${DATE}.tar.gz" >> $GITHUB_ENV
          echo "RELEASE_TAG=pyimagej-${DATE}" >> $GITHUB_ENV
          
      - name: Cleanup intermediate releases
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        run: |
          # Keep: latest (just created) + releases older than 6 months
          # Delete: intermediate releases within the last 6 months
          CUTOFF_DATE=$(date -d '6 months ago' +%Y%m%d)
          
          # Get all pyimagej releases, newest first
          gh release list --limit 100 --json tagName,createdAt | \
          jq -r '.[] | select(.tagName | startswith("pyimagej-")) | .tagName' | \
          while read tag; do
            # Extract date from tag (pyimagej-YYYYMMDD)
            release_date=${tag#pyimagej-}
            
            # Skip if it's the release we just created
            if [ "$release_date" = "$(date +%Y%m%d)" ]; then
              echo "Keeping latest release: $tag"
              continue
            fi
            
            # Keep if older than 6 months
            if [ "$release_date" -lt "$CUTOFF_DATE" ]; then
              echo "Keeping old stable release: $tag"
            else
              echo "Deleting intermediate release: $tag"
              gh release delete "$tag" --yes || true
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Release
        if: steps.check_fiji.outputs.fiji_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BUNDLE_NAME }}
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TAG }}
          body: |
            Pre-built PyImageJ bundle with Fiji and all dependencies
            - Fiji build from latest
            - Java 21 runtime included  
            - Pre-populated .jgo and .m2 caches
            - Ready for offline PyImageJ initialization
            - Ideal for environments with restricted internet access
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
